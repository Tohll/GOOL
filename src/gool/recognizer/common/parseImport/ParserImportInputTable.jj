/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ParserImportInputTable.jj */
/*@egen*/
/*
 * ParserImportInputTable.jjt
 */

/*----------------------------------------------------------------------------*/
/* The option used to the generation of a parser */

options {
}


/*----------------------------------------------------------------------------*/
/* The declaration of the input import table parser */

PARSER_BEGIN(ParserImportInputTable)
package gool.recognizer.common.parseImport;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
public class ParserImportInputTable/*@bgen(jjtree)*/implements ParserImportInputTableTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserImportInputTableState jjtree = new JJTParserImportInputTableState();

/*@egen*/
  public static void main(String[] args) throws ParseException {
  String chaine ="";
   try{
			InputStream ips=new FileInputStream("src/gool/testMatcher/test"); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String ligne;
			while ((ligne=br.readLine())!=null){
				//System.out.println(ligne);
				chaine+=ligne+"\n";
			}
			br.close(); 
		}		
		catch (Exception e){
			System.out.println(e.toString());
		}
		
		ParserImportInputTable parser = new ParserImportInputTable(new java.io.StringReader(chaine));
    List<ImportWrapperIn> table = parser.parseTable();
    for(ImportWrapperIn wrap : table){
    	wrap.print(); 
    }
  }
}

PARSER_END(ParserImportInputTable)


/*----------------------------------------------------------------------------*/
/* The tokens used to parse */

// Token skipped
SKIP : 
{     " " 
    | "\t" 
    | "\r" 
    | "\n"
    | "#" : IN_LINE_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

// Token about type
TOKEN :
{ 
 < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* ( "." ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* )* >
| < STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\"","\n"]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}

/*----------------------------------------------------------------------------*/
/* The grammar used to parse */

// The root of the grammar
List<ImportWrapperIn> parseTable()  :
{/*@bgen(jjtree) parseTable */
 SimpleNode jjtn000 = new SimpleNode(JJTPARSETABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/List<ImportWrapperIn> wraps = new ArrayList<ImportWrapperIn>(); ImportWrapperIn wrap; }
{/*@bgen(jjtree) parseTable */
    try {
/*@egen*/
    (wrap=decl_import_mapping() {wraps.add(wrap);})*  <EOF>/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/ {return wraps;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Used for all nodes declaration
ImportWrapperIn decl_import_mapping() :
{/*@bgen(jjtree) decl_import_mapping */
 SimpleNode jjtn000 = new SimpleNode(JJTDECL_IMPORT_MAPPING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ImportWrapperIn wrap = new ImportWrapperIn();}
{/*@bgen(jjtree) decl_import_mapping */
    try {
/*@egen*/
    gool_import(wrap) "<-" input_imports(wrap)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/ 
     { return wrap;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void gool_import(ImportWrapperIn wrap) :
{/*@bgen(jjtree) gool_import */
 SimpleNode jjtn000 = new SimpleNode(JJTGOOL_IMPORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String s = "";}
{/*@bgen(jjtree) gool_import */
    try {
/*@egen*/
    ("+" pathsWrapper_gool(wrap))? t=<ID>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ {
    wrap.setGoolImport(t.image);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/	
}

void pathsWrapper_gool(ImportWrapperIn wrap) :
{/*@bgen(jjtree) pathsWrapper_gool */
  SimpleNode jjtn000 = new SimpleNode(JJTPATHSWRAPPER_GOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pathsWrapper_gool */
        try {
/*@egen*/
	"[" list_paths_import_gool(wrap) "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void list_paths_import_gool(ImportWrapperIn wrap) :
{/*@bgen(jjtree) list_paths_import_gool */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_PATHS_IMPORT_GOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) list_paths_import_gool */
        try {
/*@egen*/
	pathWrapper_gool(wrap) ( LOOKAHEAD(2) "," pathWrapper_gool(wrap) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void pathWrapper_gool(ImportWrapperIn wrap) :
{/*@bgen(jjtree) pathWrapper_gool */
 SimpleNode jjtn000 = new SimpleNode(JJTPATHWRAPPER_GOOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) pathWrapper_gool */
         try {
/*@egen*/
	 t=<STRING>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/  {  wrap.addGoolIndirect(t.image.substring(1,t.image.length()-1)); }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void input_imports(ImportWrapperIn wrap) :
{/*@bgen(jjtree) input_imports */
 SimpleNode jjtn000 = new SimpleNode(JJTINPUT_IMPORTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) input_imports */
        try {
/*@egen*/
	input_import(wrap) ( LOOKAHEAD(2) "," input_import(wrap) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void input_import(ImportWrapperIn wrap) :
{/*@bgen(jjtree) input_import */
 SimpleNode jjtn000 = new SimpleNode(JJTINPUT_IMPORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) input_import */
    try {
/*@egen*/
    t=<ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {wrap.addInputImport(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/	
}
