/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ParserMethodOutputTable.jj */
/*@egen*/
/*
 * ParserMethodOutputTable.jjt
 */

/*----------------------------------------------------------------------------*/
/* The option used to the generation of a cpp parser */

options {
}


/*----------------------------------------------------------------------------*/
/* The declaration of the input method table parser */

PARSER_BEGIN(ParserMethodOutputTable)
package gool.generator.common.parseMethod;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
public class ParserMethodOutputTable/*@bgen(jjtree)*/implements ParserMethodOutputTableTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserMethodOutputTableState jjtree = new JJTParserMethodOutputTableState();

/*@egen*/
  public static void main(String[] args) throws ParseException {
  String chaine ="";
   try{
			InputStream ips=new FileInputStream("src/gool/testMatcher/test"); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String ligne;
			while ((ligne=br.readLine())!=null){
				//System.out.println(ligne);
				chaine+=ligne+"\n";
			}
			br.close(); 
		}		
		catch (Exception e){
			System.out.println(e.toString());
		}
		
    ParserMethodOutputTable parser = new ParserMethodOutputTable(new java.io.StringReader(chaine));
    List<MethodWrapperOut> wraps = parser.parseTable();
    for(MethodWrapperOut wrap : wraps){
    	wrap.print(); 
    }
  }
}

PARSER_END(ParserMethodOutputTable)


/*----------------------------------------------------------------------------*/
/* The tokens used to parse */





// Token skipped
SKIP : 
{     " " 
    | "\t" 
    | "\r" 
    | "\n"
    | "#" : IN_LINE_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

// Token about type
TOKEN :
{
      < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* ( "." ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* )* >
| < STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\"","\n"]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}

/*----------------------------------------------------------------------------*/
/* The grammar used to parse */

// The root of the grammar
List<MethodWrapperOut> parseTable()  :
{/*@bgen(jjtree) parseTable */
 SimpleNode jjtn000 = new SimpleNode(JJTPARSETABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/List<MethodWrapperOut> wraps = new ArrayList<MethodWrapperOut>(); MethodWrapperOut wrap; }
{/*@bgen(jjtree) parseTable */
    try {
/*@egen*/
    (wrap=decl_method_mapping() {wraps.add(wrap);})*  <EOF>/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/ {return wraps;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Used for all nodes declaration
MethodWrapperOut decl_method_mapping() :
{/*@bgen(jjtree) decl_method_mapping */
 SimpleNode jjtn000 = new SimpleNode(JJTDECL_METHOD_MAPPING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/MethodWrapperOut wrap = new MethodWrapperOut(); Token t;}
{/*@bgen(jjtree) decl_method_mapping */
    try {
/*@egen*/
    gool_method(wrap) "<-" output_method(wrap)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {if(!wrap.validate()) throw new Exception("Unvalide configuration file."); return wrap;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void gool_method(MethodWrapperOut wrap) :
{/*@bgen(jjtree) gool_method */
 SimpleNode jjtn000 = new SimpleNode(JJTGOOL_METHOD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) gool_method */
    try {
/*@egen*/
    t=<ID> {wrap.setGoolMethod(t.image);}
    (
    LOOKAHEAD(2)
	"(" ")"
	| "(" list_params_gool(wrap) ")"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/	
}

void list_params_gool(MethodWrapperOut wrap) :
{/*@bgen(jjtree) list_params_gool */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_PARAMS_GOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) list_params_gool */
        try {
/*@egen*/
	param_gool(wrap) ( LOOKAHEAD(2) "," param_gool(wrap) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param_gool (MethodWrapperOut wrap) :
{/*@bgen(jjtree) param_gool */
 SimpleNode jjtn000 = new SimpleNode(JJTPARAM_GOOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String s = "";}
{/*@bgen(jjtree) param_gool */
        try {
/*@egen*/
  	t=<ID> 
	(
	 "=" s=default_value()
	)?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{wrap.addParamGool(t.image,s);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void output_method(MethodWrapperOut wrap) :
{/*@bgen(jjtree) output_method */
 SimpleNode jjtn000 = new SimpleNode(JJTOUTPUT_METHOD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2;}
{/*@bgen(jjtree) output_method */
    try {
/*@egen*/
    t1=<ID> {wrap.setConcreteMethod(t1.image);}
    (
    LOOKAHEAD(2)
	"(" ")"
	| "(" list_params_output(wrap) ")"
    )
    ":" t2=<ID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {wrap.setConcreteMethodReturned(t2.image);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/	
}

void list_params_output(MethodWrapperOut wrap) :
{/*@bgen(jjtree) list_params_output */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_PARAMS_OUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) list_params_output */
        try {
/*@egen*/
	param_output(wrap) ( LOOKAHEAD(2) "," param_output(wrap) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param_output (MethodWrapperOut wrap) :
{/*@bgen(jjtree) param_output */
 SimpleNode jjtn000 = new SimpleNode(JJTPARAM_OUTPUT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2; String s = "";}
{/*@bgen(jjtree) param_output */
  try {
/*@egen*/
  t1=<ID> t2=<ID> 
  (
	 "=" s=default_value()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {wrap.addParamConcrete(t1.image,t2.image,s);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String default_value() :
{/*@bgen(jjtree) default_value */
 SimpleNode jjtn000 = new SimpleNode(JJTDEFAULT_VALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) default_value */
        try {
/*@egen*/
	t=<STRING>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {if(t.image != null) return t.image.substring(1,t.image.length()-1); return null;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}