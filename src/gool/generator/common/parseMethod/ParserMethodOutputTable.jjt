
/*
 * ParserMethodOutputTable.jjt
 */

/*----------------------------------------------------------------------------*/
/* The option used to the generation of a cpp parser */

options {
}


/*----------------------------------------------------------------------------*/
/* The declaration of the input method table parser */

PARSER_BEGIN(ParserMethodOutputTable)
package gool.generator.common.parseMethod;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
public class ParserMethodOutputTable {
  public static void main(String[] args) throws ParseException {
  String chaine ="";
   try{
			InputStream ips=new FileInputStream("src/gool/testMatcher/test"); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String ligne;
			while ((ligne=br.readLine())!=null){
				//System.out.println(ligne);
				chaine+=ligne+"\n";
			}
			br.close(); 
		}		
		catch (Exception e){
			System.out.println(e.toString());
		}
		
    ParserMethodOutputTable parser = new ParserMethodOutputTable(new java.io.StringReader(chaine));
    List<MethodWrapperOut> wraps = parser.parseTable();
    for(MethodWrapperOut wrap : wraps){
    	wrap.print(); 
    }
  }
}

PARSER_END(ParserMethodOutputTable)


/*----------------------------------------------------------------------------*/
/* The tokens used to parse */





// Token skipped
SKIP : 
{     " " 
    | "\t" 
    | "\r" 
    | "\n"
    | "#" : IN_LINE_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

// Token about type
TOKEN :
{
      < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* ( "." ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* )* >
| < STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\"","\n"]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}

/*----------------------------------------------------------------------------*/
/* The grammar used to parse */

// The root of the grammar
List<MethodWrapperOut> parseTable()  :
{List<MethodWrapperOut> wraps = new ArrayList<MethodWrapperOut>(); MethodWrapperOut wrap; }
{
    (wrap=decl_method_mapping() {wraps.add(wrap);})*  <EOF> {return wraps;}
}

// Used for all nodes declaration
MethodWrapperOut decl_method_mapping() :
{MethodWrapperOut wrap = new MethodWrapperOut(); Token t;}
{
    gool_method(wrap) "<-" output_method(wrap) 
    {if(!wrap.validate()) throw new Exception("Unvalide configuration file."); return wrap;}
}

void gool_method(MethodWrapperOut wrap) :
{Token t;}
{
    t=<ID> {wrap.setGoolMethod(t.image);}
    (
    LOOKAHEAD(2)
	"(" ")"
	| "(" list_params_gool(wrap) ")"
    )	
}

void list_params_gool(MethodWrapperOut wrap) :
{}
{
	param_gool(wrap) ( LOOKAHEAD(2) "," param_gool(wrap) )*
}

void param_gool (MethodWrapperOut wrap) :
{Token t; String s = "";}
{
  	t=<ID> 
	(
	 "=" s=default_value()
	)?
	{wrap.addParamGool(t.image,s);}
}



void output_method(MethodWrapperOut wrap) :
{Token t1; Token t2;}
{
    t1=<ID> {wrap.setConcreteMethod(t1.image);}
    (
    LOOKAHEAD(2)
	"(" ")"
	| "(" list_params_output(wrap) ")"
    )
    ":" t2=<ID> {wrap.setConcreteMethodReturned(t2.image);}	
}

void list_params_output(MethodWrapperOut wrap) :
{}
{
	param_output(wrap) ( LOOKAHEAD(2) "," param_output(wrap) )*
}

void param_output (MethodWrapperOut wrap) :
{Token t1; Token t2; String s = "";}
{
  t1=<ID> t2=<ID> 
  (
	 "=" s=default_value()
  )?
  {wrap.addParamConcrete(t1.image,t2.image,s);}
}

String default_value() :
{Token t;}
{
	t=<STRING> {if(t.image != null) return t.image.substring(1,t.image.length()-1); return null;}
}