
/*
 * ParserClassOutputTable.jjt
 */

/*----------------------------------------------------------------------------*/
/* The option used to the generation of a parser */

options {
}


/*----------------------------------------------------------------------------*/
/* The declaration of the input class table parser */

PARSER_BEGIN(ParserClassOutputTable)
package gool.generator.common.parseClass;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
public class ParserClassOutputTable {
  public static void main(String[] args) throws ParseException {
  String chaine ="";
   try{
			InputStream ips=new FileInputStream("src/gool/testMatcher/test"); 
			InputStreamReader ipsr=new InputStreamReader(ips);
			BufferedReader br=new BufferedReader(ipsr);
			String ligne;
			while ((ligne=br.readLine())!=null){
				//System.out.println(ligne);
				chaine+=ligne+"\n";
			}
			br.close(); 
		}		
		catch (Exception e){
			System.out.println(e.toString());
		}
		
		ParserClassOutputTable parser = new ParserClassOutputTable(new java.io.StringReader(chaine));
    List<ClassWrapperOut> table = parser.parseTable();
    for(ClassWrapperOut wrap : table){
    	wrap.print(); 
    }
  }
}

PARSER_END(ParserClassOutputTable)


/*----------------------------------------------------------------------------*/
/* The tokens used to parse */

// Token skipped
SKIP : 
{     " " 
    | "\t" 
    | "\r" 
    | "\n"
    | "#" : IN_LINE_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

// Token about type
TOKEN :
{
      < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* ( "." ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* )* >
| < STRING : ("L")? "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\"","\n"]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}

/*----------------------------------------------------------------------------*/
/* The grammar used to parse */

// The root of the grammar
List<ClassWrapperOut> parseTable()  :
{List<ClassWrapperOut> wraps = new ArrayList<ClassWrapperOut>(); ClassWrapperOut wrap; }
{
    (wrap=decl_class_mapping() {wraps.add(wrap);})*  <EOF> {return wraps;}
}

// Used for all nodes declaration
ClassWrapperOut decl_class_mapping() :
{ClassWrapperOut wrap = new ClassWrapperOut();}
{
    gool_class(wrap) "<-" output_class(wrap) 
     { return wrap;}
}

void gool_class(ClassWrapperOut wrap) :
{Token t;}
{
    t=<ID> {wrap.setGoolClass(t.image);}	
}

void output_class(ClassWrapperOut wrap) :
{Token t;}
{
    t=<ID> {wrap.setInputClass(t.image);}	
}